import pandas as pd
import numpy as np

!pip install tensorflow

df = pd.read_csv("C:/Users/riyam/Downloads/LP5/HousingData.csv")

df.head()

df.columns

df.isna().sum()

df.describe()

for i in df.columns:
    mean_value = df[i].mean()  # Calculate the mean
    df[i] = df[i].fillna(mean_value)

df.isna().sum()

df.head()

from sklearn.model_selection import train_test_split

# X = df.loc[:,df.columns != "MEDV"]
# y = df.loc[:,df.columns == "MEDV"]
# X_train,y_train,X_test,y_test = train_test_split(X,y,test_size=0.3,random_state=123)

# Ensure 'MEDV' (target) is excluded from the feature set
X = df.drop(columns=['MEDV'])  # remove 'MEDV' from the features
y = df['MEDV']  # assign 'MEDV' to the target
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=123)

from sklearn.preprocessing import MinMaxScaler

mms = MinMaxScaler()
mms.fit(X_train)  # fit only on the training set
X_train = mms.transform(X_train)  # transform the training set
X_test = mms.transform(X_test)  # transform the test set



from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Input,Dense

# Create a Sequential model
model = Sequential()

# Define the input layer with explicit Input
model.add(Input(shape=(13,), name='input_layer'))

# Add dense layers to the model
model.add(Dense(128, activation='relu', name='dense_1'))
model.add(Dense(64, activation='relu', name='dense_2'))
model.add(Dense(1, activation='linear', name='dense_output'))

# Compile the model with optimizer, loss, and metrics
model.compile(optimizer='adam', loss='mse', metrics=['mae'])

# display the model
model.summary()

history = model.fit(X_train, y_train, epochs=100, validation_split=0.05, verbose = 1)

mse_nn, mae_nn = model.evaluate(X_test, y_test)

print('Mean squared error on test data: ', mse_nn)
print('Mean absolute error on test data: ', mae_nn)