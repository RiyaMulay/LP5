import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
from sklearn.metrics import mean_absolute_error, mean_squared_error
import tensorflow as tf
import matplotlib.pyplot as plt

# Enable eager execution for TensorFlow
tf.config.run_functions_eagerly(True)

# Step 1: Data Preparation
data = pd.read_csv('goog1.csv')
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data['Close'].values.reshape(-1, 1))

# Step 2: Dataset Splitting
split_index = int(len(scaled_data) * 0.8)
train_data = scaled_data[:split_index]
test_data = scaled_data[split_index:]

# Step 3: Data Sequencing
def create_sequences(data, time_steps=6):
    X = [data[i:i+time_steps, 0] for i in range(len(data) - time_steps)]
    y = [data[i+time_steps, 0] for i in range(len(data) - time_steps)]
    return np.array(X), np.array(y)

X_train, y_train = create_sequences(train_data)
X_test, y_test = create_sequences(test_data)

# Step 4: Model Training
model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], 1)),
    LSTM(50),
    Dense(1),
])
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, epochs=50, batch_size=4)

# Step 5: Model Evaluation
y_pred = model.predict(X_test)
y_pred = scaler.inverse_transform(y_pred)
y_test = scaler.inverse_transform(y_test.reshape(-1, 1))

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print(f'MAE: {mae}, MSE: {mse}, RMSE: {rmse}')

# Step 6: Prediction
last_6_days_scaled = scaler.transform(data['Close'][-6:].values.reshape(-1, 1))
X_pred = np.array([last_6_days_scaled])
pred_price = model.predict(X_pred)
pred_price = scaler.inverse_transform(pred_price)

print(f'Predicted price for the next day: {pred_price[0][0]}')

# Plotting actual vs. predicted prices
plt.plot(y_test, label='Actual Price')
plt.plot(y_pred, label='Predicted Price')
plt.title('Actual vs Predicted Price')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.grid(True)
plt.show()
